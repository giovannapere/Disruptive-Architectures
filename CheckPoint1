{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y2_dxQlsoU5c"
      },
      "source": [
        "## Aprendizagem de máquina\n",
        "\n",
        "### Objetivos\n",
        "\n",
        "  - Avaliar os conceitos de aprendizado de maquina aprendidos no curso\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LRghoDzPoU5g"
      },
      "source": [
        "# Desafio\n",
        "\n",
        "Você foi contratado por uma empresa inovadora do ramo imobiliario como `QuintoAndar, Loft, Terraz, grupo Zap (ZAP, Viva Real, DataZAP, FipeZAP, SuaHouse, Geoimóvel, Sub100 e Conecta Imobi) ou Imobi Conference`. O seu desafio está no apio à tomada de decisão baseada em dados (empresa data driven). \n",
        "\n",
        "Nesse sentido, use a base de dados **aptos.csv** para realizar a descoberta do conhecimento e responder a pergunta: \n",
        "\n",
        "**`Quanto vale um apartamento de 72m2 com 2 quartos, 2 vagas, reformado no Centro?`**\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ymhmpkHFoU5h"
      },
      "source": [
        "### Orientações\n",
        "\n",
        "Siga as instruções, completando e construindo os algoritmos necessários.\n",
        "\n",
        "Nas celulas` Seu Código aqui...` significa que é necessário realizar a implementação de algum código. Utilize quantos blocos(células) julgar necessário para criar o código.\n",
        "\n",
        "Nas celulas `Responda` significa que é nessário uma resposta clara e objetiva (pode ser por texto, código, gráfico, imagem...) para a pergunta."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0XDcfN7ooU5i"
      },
      "source": [
        "## Rubrica para avaliação\n",
        "    \n",
        "Os critérios de avaliação do projeto segue conforme a rubrica.\n",
        "\n",
        "- R1: Exploração de Dados (Até 2 pontos)\n",
        "- R2: Análise Descritiva de Dados (Até 2 pontos)\n",
        "- R3: Desenvolvimento do Modelo (Até 2 pontos)\n",
        "- R4: Treinamento e Teste do Modelo (Até 2 pontos)\n",
        "- R5: Conclusões Finais (Até 2 pontos)\n",
        "\n",
        "**Nota_final = R1 + R2 + R3 + R4 + R5**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Giovanna Sousa Pereira de Lima RM94767"
      ],
      "metadata": {
        "id": "LxpIRh6ABLZC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-RovcUPFoU5i"
      },
      "source": [
        "# 1. Exploração de Dados\n",
        "\n",
        "Carregue o dataset e faça uma inspeção nas 15 primeiras linhas para identificação básica dos atributos.\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "Fbhswwyy3V_s"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('aptos.csv', sep=',')"
      ],
      "metadata": {
        "id": "UkQ3cif43WPl"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(15)"
      ],
      "metadata": {
        "id": "S4DR9iMj3fdo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.dropna(axis = 0, inplace = True)"
      ],
      "metadata": {
        "id": "HG74SryNq1R2"
      },
      "execution_count": 151,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "id": "N3YZEm8lq-hq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "osdTap6eoU5l"
      },
      "source": [
        "**Resposta:**\n",
        "\n",
        "-   Metros: quantide de metros no imóvel \n",
        "-   Valor: preço do imóvel\n",
        "-   Quartos: quantidade de quartos no imóvel\n",
        "-   Vagas: numero de vagas presente no imóvel\n",
        "-   Reformado: se o imóvel foi ou não reformado\n",
        "-   Bairro: local onde o imóvel está localizado "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-k6fXMhroU5m"
      },
      "source": [
        "**Pergunta:** Cite 2 cenários que podem fazer sentido na leitura dos dados apresentados.\n",
        "\n",
        "Exemplo: \n",
        "- Eu acho que o preço da gasolina sobe com o preço do petróleo. \n",
        "- Eu acho que na média homens são mais altos que mulheres na mesma faixa etaria.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HvTx77MjoU5n"
      },
      "source": [
        "**Resposta:**\n",
        "\n",
        "1.  Eu acho que o valor do imóvel aumenta se houver mais quartos.\n",
        "2.  Eu acho que quanto mais perto do centro da cidade maior o valor do imóvel."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6Hb765MIoU5n"
      },
      "source": [
        "## 2. Análise descritiva de dados\n",
        "\n",
        "Faça uma análise exploratória dos dados. Utilize-se de gráficos e tabelas auxiliares, faça correlações entre os atributos.... Com o objetivo validar as afirmações levantadas acima."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bgjJzClDoU5o"
      },
      "outputs": [],
      "source": [
        "df.head(15)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "id": "A4wFZKeMTHyP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "id": "ZmzTgMVLYZBs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.groupby('metros').size())"
      ],
      "metadata": {
        "id": "Q5-QfRs7Yf3E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(17,10))\n",
        "sns.heatmap(df.corr(), annot=True, cmap = 'Greens')"
      ],
      "metadata": {
        "id": "mvS9_n_ZVp2R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# explorar matrix de correlação de outra forma (mesma da anterior)\n",
        "correlation_matrix = df.corr().round(2)\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10,10))    \n",
        "sns.heatmap(data=correlation_matrix, annot=True, linewidths=.5, ax=ax)"
      ],
      "metadata": {
        "id": "F-tge1g7biVD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "id": "CN-vwDgkYn6M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px"
      ],
      "metadata": {
        "id": "hbPzChDx3p9H"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x='quartos', y='valor', data=df)"
      ],
      "metadata": {
        "id": "8cAjQ09C3rVP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(data=df)"
      ],
      "metadata": {
        "id": "zwz0-D8seDqt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(data=df, x=\"valor\", hue=\"quartos\")"
      ],
      "metadata": {
        "id": "ZL3eUMHHffqN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grouped_df = df.groupby('quartos')['valor'].mean()\n",
        "fig, ax = plt.subplots()\n",
        "ax.bar(grouped_df.index, grouped_df.values)\n",
        "plt.show()\n",
        "print(grouped_df)"
      ],
      "metadata": {
        "id": "NKG8BRVCm6-j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(data=df, x=\"valor\", hue=\"bairro\")"
      ],
      "metadata": {
        "id": "Utd4gCf1hIiL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x='valor', y='bairro', data=df)\n",
        "plt.title('')"
      ],
      "metadata": {
        "id": "vWQqckjH30Ke"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kgkN3RYdoU5p"
      },
      "source": [
        "### __(BONUS: 1 ponto extra.)__ Análise de Outliers\n",
        "*Esse é um ponto extra, faça se quiser...\n",
        "\n",
        "Realize a análise e o tratamento de **outliers**, como referência para estudo:\n",
        "\n",
        "* [link1](https://machinelearningmastery.com/model-based-outlier-detection-and-removal-in-python/)\n",
        "* [link2](https://towardsdatascience.com/4-machine-learning-techniques-for-outlier-detection-in-python-21e9cfacb81d)\n",
        "* [link3](https://minerandodados.com.br/tratando-outliers-python/)\n",
        "\n",
        "**Pergunta:** Foram localizados outliers? Qual o método de análise adotado? Se existe, como os dados foram tratados (foram removidos ou mantidos)? "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "q1 = df.quantile(0.25)\n",
        "q3 = df.quantile(0.75)\n",
        "iqr = q3 - q1\n",
        "df_sem_outliers = df[(df > (q1 - 1.5 * iqr)) & (df < (q3 + 1.5 * iqr))]"
      ],
      "metadata": {
        "id": "kd2bXfXPN9FS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_sem_outliers.to_csv('aptos.csv', index=False)"
      ],
      "metadata": {
        "id": "fLKmOraaN_9B"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x=df['metros'])\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "rae0ICm8OEf6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(x=df['metros'], bins=20, kde=True)\n",
        "plt.show()\n",
        "\n",
        "sns.histplot(x=df_sem_outliers['metros'], bins=20, kde=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "FV07NYMvOWHh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kLKhFu-GoU5p"
      },
      "source": [
        "## 3. Desenvolvimento do Modelo"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IXRPL8BdoU5p"
      },
      "source": [
        "**Pergunta:** O conjunto de dados indica a aplicação de qual modelo de aprendizagem de maquina para determinação do valor de um imóvel? Por que ? "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "781HNHyioU5q"
      },
      "source": [
        "**Resposta:**\n",
        "\n",
        "    [ ] Aprendizado por reforço\n",
        "    [x] Aprendizado supervisionado\n",
        "    [ ] Aprendizado não supervisionado\n",
        "\n",
        "    Por que? Pois o aprendizado supervisionado é um tipo de aprendizado de máquina que envolve a criação de um modelo com base em dados rotulados, prevendo-o para novos dados. Com base nesses dados ele iria prever descrições futuras, com as já existentes,"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AtzM3AWqoU5q"
      },
      "source": [
        "**Pergunta:** Qual a técnica sugerida para este projeto?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ECCltbigoU5q"
      },
      "source": [
        "**Resposta:**\n",
        "\n",
        "    [x] Regressão\n",
        "    [ ] Classificação\n",
        "    [ ] Clusterização"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-lzx692FoU5q"
      },
      "source": [
        "**Pergunta:** Escolha 2 modelos de algoritmos para testar a performance de cada um deles."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t2nWRkiBoU5r"
      },
      "source": [
        "**Resposta:**\n",
        "\n",
        "1. algoritimo ... Regressão Linear\n",
        "2. algoritimo ... Random Forest"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sTMzg6DFoU5r"
      },
      "source": [
        "__(BONUS: 1 ponto extra.)__ **Pergunta:** Explique como cada algoritmo funciona.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "792OgnwXoU5r"
      },
      "source": [
        "**Resposta:**\n",
        "\n",
        "1. O algoritmo de regressão linear do Scikit-learn é baseado no método dos mínimos quadrados ordinários (OLS), que é uma técnica estatística utilizada para estimar os parâmetros desconhecidos de um modelo de regressão.\n",
        "2. Random Forest é um algoritmo de aprendizado supervisionado no qual múltiplas árvores de decisão (Decision Trees) são construídas e combinadas para obter uma previsão mais precisa e robusta. É um algoritmo popular usado na solução de uma variedade de problemas de aprendizado de máquina, como classificação de imagens, reconhecimento de fala e detecção de anomalias, entre outros."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PaHiyNqfoU5r"
      },
      "source": [
        "## 4. Treinamento e teste do modelo"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YabW089OoU5r"
      },
      "source": [
        "Crie um subset dos dados apenas com os atributos que serão utilizados para o treinameno e teste do modelo. Divida o subset em conjunto de treinamento e teste."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 100,
      "metadata": {
        "id": "TSoTYQrJoU5s"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_subset = df[['metros', 'quartos', 'vagas', 'reformado', 'valor']]"
      ],
      "metadata": {
        "id": "kbnoXfNi52Wd"
      },
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(df_subset.drop('valor', axis=1), df_subset['valor'], test_size=0.3, random_state=42)"
      ],
      "metadata": {
        "id": "XneNloXn6KYb"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f'Conjunto de treinamento: {len(X_train)} amostras')\n",
        "print(f'Conjunto de teste: {len(X_test)} amostras')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Yw8VHb36Nkh",
        "outputId": "d3fb7a6b-b33d-4565-afba-d896b419e01d"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Conjunto de treinamento: 78 amostras\n",
            "Conjunto de teste: 34 amostras\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ljAS6IUvoU5s"
      },
      "source": [
        "Faça o treinamento e teste dos 2 algoritmos escolhidos. Utilize uma métrica (ex. R2-score, RMSE e MAE...) para avaliar a performance dos modelos."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Un-WuFQ6oU5s"
      },
      "source": [
        "### Algoritmo 1 - Regressão Linear"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score"
      ],
      "metadata": {
        "id": "pn1KF-CHCtpd"
      },
      "execution_count": 124,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "dPYK87nS6s-D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "QXUaBgM8_Z6S"
      },
      "execution_count": 126,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2 = r2_score(y_test, y_pred)\n",
        "rmse = mean_squared_error(y_test, y_pred, squared=False)\n",
        "mae = mean_absolute_error(y_test, y_pred)"
      ],
      "metadata": {
        "id": "qwOSVDgf_bnK"
      },
      "execution_count": 127,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"R-squared: {r2:.2f}\")\n",
        "print(f\"Root mean squared error: {rmse:.2f}\")\n",
        "print(f\"Mean absolute error: {mae:.2f}\")"
      ],
      "metadata": {
        "id": "-1wzz8ga_djx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_predTrain = model.predict(X_train)"
      ],
      "metadata": {
        "id": "49YtvsVQrrsv"
      },
      "execution_count": 129,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2Train = r2_score(y_train, y_predTrain)\n",
        "rmse2 = mean_squared_error(y_train, y_predTrain, squared=False)\n",
        "mae2 = mean_absolute_error(y_train, y_predTrain)"
      ],
      "metadata": {
        "id": "yj6bedT_r1C0"
      },
      "execution_count": 130,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"R-squared: {r2Train:.2f}\")\n",
        "print(f\"Root mean squared error: {rmse2:.2f}\")\n",
        "print(f\"Mean absolute error: {mae2:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3xVlXkeFr-UQ",
        "outputId": "b5ea6cd9-6b4d-47cb-c8ea-bb1fc6f378b8"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R-squared: 0.86\n",
            "Root mean squared error: 62.64\n",
            "Mean absolute error: 47.93\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uxPky8nMoU5s"
      },
      "source": [
        "### Algoritmo 2 - Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error"
      ],
      "metadata": {
        "id": "c1Kt7d4X7XbZ"
      },
      "execution_count": 136,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "kjwolKBb_vcg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "kZcOeRHf_zGq"
      },
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2 = r2_score(y_test, y_pred)\n",
        "rmse = mean_squared_error(y_test, y_pred, squared=False)\n",
        "mae = mean_absolute_error(y_test, y_pred)"
      ],
      "metadata": {
        "id": "zaaSmi7e_2x9"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"R-squared: {r2:.2f}\")\n",
        "print(f\"Root mean squared error: {rmse:.2f}\")\n",
        "print(f\"Mean absolute error: {mae:.2f}\")"
      ],
      "metadata": {
        "id": "uH2KFz4e_4Um"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_predTrain = model.predict(X_train)"
      ],
      "metadata": {
        "id": "uoIO6edwrn4X"
      },
      "execution_count": 141,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2Train = r2_score(y_train, y_predTrain)\n",
        "rmse2 = mean_squared_error(y_train, y_predTrain, squared=False)\n",
        "mae2 = mean_absolute_error(y_train, y_predTrain)"
      ],
      "metadata": {
        "id": "IAe72IMlsq_r"
      },
      "execution_count": 142,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"R-squared: {r2Train:.2f}\")\n",
        "print(f\"Root mean squared error: {rmse2:.2f}\")\n",
        "print(f\"Mean absolute error: {mae2:.2f}\")"
      ],
      "metadata": {
        "id": "MFly01QJszER"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gw885v4joU5t"
      },
      "source": [
        "Sumarize na tabela abaixo os resultados obtidos para os conjuntos de dados de treino e de teste"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4GRMUaeFoU5t"
      },
      "source": [
        "**Resposta:**\n",
        "\n",
        "|    | algoritmo1 | algoritmo2 |\n",
        "|:---:|:---:|:---:|\n",
        "| treino |76.34|85.18 |\n",
        "| teste  | 62.64 |37.18|"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AEkwYDEMoU5t"
      },
      "source": [
        "**Pergunta:** Qual dos algoritmos obteve um resultado melhor? Justifique\n",
        "\n",
        "**Resposta:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q2PKUZQBoU5t"
      },
      "source": [
        "## Modelo de produção: Teste com novos dados\n",
        "\n",
        "Use seu modelo treinado para determinar: \n",
        "\n",
        "**`Quanto vale um apartamento de 72m2 com 2 quartos, 2 vagas, reformado no Centro?`**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression"
      ],
      "metadata": {
        "id": "cJVFulw81FjR"
      },
      "execution_count": 153,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df[['metros', 'quartos', 'vagas', 'reformado']]\n",
        "y = df['valor']"
      ],
      "metadata": {
        "id": "NYGaM1EA1K9a"
      },
      "execution_count": 154,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = LinearRegression()"
      ],
      "metadata": {
        "id": "DqDfca4c1N13"
      },
      "execution_count": 155,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X, y)"
      ],
      "metadata": {
        "id": "QIM_9UDv1P9C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# estimar o preço do apartamento de 72m2 com 2 quartos, 2 vagas, reformado no Centro\n",
        "apartamento = pd.DataFrame({\n",
        "    'metros': [72],\n",
        "    'quartos': [2],\n",
        "    'vagas': [2],\n",
        "    'reformado': [1],\n",
        "})"
      ],
      "metadata": {
        "id": "bi__mMC_1Tp4"
      },
      "execution_count": 157,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "valor = model.predict(apartamento)[0]\n",
        "\n",
        "print(f'O apartamento está valendo: R$ {valor:.2f}')"
      ],
      "metadata": {
        "id": "6wj2TDjw1UWH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UPa9oxSHoU5u"
      },
      "source": [
        "## 6. Conclusões finais\n",
        "\n",
        "Ufa!!... Chegamos ao final. Parabéns! De forma simplificada e completa, passamos por todas as etapas de um projeto de aprendizado de maquina. Outras etapas podem ser adicionadas no tratamento dos dados e desenvolvimento do modelo.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fylQjuwkoU5u"
      },
      "source": [
        "**Pergunta:**: O modelo desenvolvido obteve um resultado satisfatório? Justifique:\n",
        "\n",
        "**Resposta**: Muito, consegui realizar com clareza e com os objetivos esperados "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oRo9GXdEoU5u"
      },
      "source": [
        "**Pergunta:**: O que faria diferente para melhorar resultado obtido? Justifique:\n",
        "\n",
        "**Resposta**: Melhoraria os desafios para ganhar pontos extras  \n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "interpreter": {
      "hash": "916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1"
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.2"
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "y2_dxQlsoU5c",
        "ymhmpkHFoU5h"
      ]
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
